
#include <Wire.h>
#include <ESP8266WiFi.h>
#include <Ticker.h>

#include "HX711.h"


int counter = 0;

// your network SSID (name)
char ssid[] = "<VWC_3f_new>";
// your network password
char pass[] = "<88888888>"; 

char thingspeakKey[] = "<GG6C6A9ZQ2MGSEE2>";

const char* host = "api.thingspeak.com";

// NodeMCU pins 
HX711 scale(12, 14);    // parameter "gain" is ommited; the default value 128 is used by the library

// this array keeps function pointers to all frames
// frames are the single views that slide from right to left
///void (*frameCallbacks[2])(int x, int y) = {drawFrame1, drawFrame2};

// how many frames are there?
///int frameCount = 3;

// on frame is currently displayed
///int currentFrame = 0;

///float emptyWeight = 550.f;
///float fullWeight = 1000.f;
///float waterMax = fullWeight - emptyWeight;
float currentWeight = 0;

Ticker ticker;
bool isReadyForThingspeakUpdate = true;

void setup() {
  Serial.begin(115200);
  Serial.println("Starting up...");
  // The HX711 functions do not yield. Watchdog would reset
  ESP.wdtDisable();
  
  scale.set_scale(2158.45f); 
  scale.tare();
  currentWeight = scale.get_units(1);
  
  ///display.init();
  // set the drawing functions
  ///display.setFrameCallbacks(2, frameCallbacks);
  // how many ticks does a slide of frame take?
  ///display.setFrameTransitionTicks(10);
  ///display.setFrameWaitTicks(200);
  ///display.clear();
  ///display.display();
  
  WiFi.begin(ssid, pass);
  
  int counter = 0;
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    ///display.clear();
    ///display.drawXbm(34,10, 60, 36, WiFi_Logo_bits);
    ///drawSpinner(3, counter % 3);
    ///display.display();
    counter++;
  }
  Serial.println("");  

  // update the weather information every 10 mintues only
  // forecast.io only allows 1000 calls per day
  ticker.attach(60, setReadyForThingspeakUpdate);

}

void setReadyForThingspeakUpdate() {
  isReadyForThingspeakUpdate = true;  
}

void updateThingspeak() {
  Serial.println("Updating thingspeak...");
  WiFiClient client;
  const int httpPort = 80;
  if (!client.connect(host, httpPort)) {
    Serial.println("connection failed");
    return;
  }
  
  //float currentWater = max(0, currentWeight - emptyWeight);
  //float currentLevel = currentWater / waterMax;

  String url = "/update?key=";
  url += thingspeakKey;
  url += "&field1=";
  url += String(currentWeight);
  //url += "&field2=";
  //url += String(currentWater);
  //url += "&field3=";
  //url += String(currentLevel * 100);

  // This will send the request to the server
  String request = String("GET ") + url + " HTTP/1.1\r\n" +
               "Host: " + host + "\r\n" + 
               "Connection: close\r\n\r\n";
  Serial.println(request);
  client.print(request);
  delay(1000);
  
  // Read all the lines of the reply from server and print them to Serial
  while(client.available()){
    String line = client.readStringUntil('\r');
    Serial.print(line);
  }

}


