#include "HX711.h"
#include <ESP8266WiFi.h>
 
// replace with your channel's thingspeak API key, 
String apiKey = "HZDL0R0CIU6N61WX";
const char* ssid = "VWC_3f_new";
const char* password = "88888888"; 
const char* server = "api.thingspeak.com";
//#define DHTPIN 2 // what pin we're connected to
#define _baudrate   115200

 
HX711 scale(12, 14, 128);  
WiFiClient client;
   
 
void setup() {                
  Serial.begin(115200);
  delay(10);
  
  WiFi.begin(ssid, password);
 
  Serial.println();
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
   
  WiFi.begin(ssid, password);
   
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");

//HX711      
  Serial.begin(115200);
  Serial.println("HX711 Demo");
  Serial.println("Before setting up the scale:");
  Serial.print("read: \t\t");
  Serial.println(scale.read());      // print a raw reading from the ADC
  Serial.print("read average: \t\t");
  
  ESP.wdtDisable();
  Serial.println(scale.read_average(20));   // print the average of 20 readings from the ADC
  ESP.wdtEnable(2000);

  Serial.print("get value: \t\t");
  Serial.println(scale.get_value(5));   // print the average of 5 readings from the ADC minus the tare weight (not set yet)
  Serial.print("get units: \t\t");
  
  ESP.wdtDisable();
  Serial.println(scale.get_units(5), 1);  // print the average of 5 readings from the ADC minus tare weight (not set) divided
// by the SCALE parameter (not set yet)
  ESP.wdtEnable(2000);

  scale.set_scale(2280.f);    // this value is obtained by calibrating the scale with known weights; see the README for details
  scale.tare();               // reset the scale to 0

  Serial.println("After setting up the scale:");
  Serial.print("read: \t\t");
  Serial.println(scale.read());                 // print a raw reading from the ADC
  Serial.print("read average: \t\t");
  
  ESP.wdtDisable();
  Serial.println(scale.read_average(20));       // print the average of 20 readings from the ADC
  ESP.wdtEnable(2000);

  Serial.print("get value: \t\t");
  
  ESP.wdtDisable();
  Serial.println(scale.get_value(5));   // print the average of 5 readings from the ADC minus the tare weight, set with tare()
  ESP.wdtEnable(2000);

  Serial.print("get units: \t\t");
 
  ESP.wdtDisable();
  Serial.println(scale.get_units(5), 1);        // print the average of 5 readings from the ADC minus tare weight, divided
  // by the SCALE parameter set with set_scale
  ESP.wdtEnable(2000);

  Serial.println("Readings:");
  
  
}
 
 
void loop() {
  
  float raw = scale.get_units(20); 
  float w = raw/10;
  
  if ( w < 65 ) {
     Serial.println("Too Light!");
     Serial.print("Weight: ");
     Serial.print(w);
     Serial.println("KG");
    } else {
     Serial.print("Weight: ");
     Serial.print(w);
     Serial.println("KG");
    
 
   (client.connect(server,80)); {  //   "184.106.153.149" or api.thingspeak.com
    String postStr = apiKey;
           postStr +="&field1=";
           postStr += String(w);
           postStr += "\r\n\r\n";
 
     client.print("POST /update HTTP/1.1\n"); 
     client.print("Host: api.thingspeak.com\n"); 
     client.print("Connection: close\n"); 
     client.print("X-THINGSPEAKAPIKEY: "+apiKey+"\n"); 
     client.print("Content-Type: application/x-www-form-urlencoded\n"); 
     client.print("Content-Length: "); 
     client.print(postStr.length()); 
     client.print("\n\n"); 
     client.print(postStr);
     Serial.println("send to Thingspeak");  
     Serial.println("Waiting...");    
     //thingspeak needs minimum 15 sec delay between updates
     delay(15000);  
   }
  }
  client.stop();
 
  
}
